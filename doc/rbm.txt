.. _RBM:

Restricted Boltzmann Machines (RBM)
===================================


.. note::
    The code for this section is available for download `here`_.

.. _here: http://deeplearning.net/tutorial/code/rbm.py



Energy-Based Models (EBM)
+++++++++++++++++++++++++

**Energy-based** models associate a scalar energy to each configuration of the
variables of interest. Learning corresponds to modifying that energy function
so that its shape has desirable properties. For example, we would like
plausible or desirable configurations to have low energy.  Energy-based
probabilistic models define a probability distribution through an energy
function, as follows:

.. math::
  :label: energy1

  p(x) = \frac {e^{-E(x)}} {Z}.

The normalizing factor :math:`Z` is called the **partition function** by analogy
with physical systems.

.. math::
    Z = \sum_x e^{-E(x)}

An energy-based model can be learnt by performing (stochastic) gradient
descent on the empirical log-likelihood of the training data:

.. math::
    \mathcal{L}(\theta, \mathcal{D}) = \frac{1}{N} \sum_{x^{(i)} \in
    \mathcal{D}} \log\ p(x^{(i)}).

using the stochastic gradient :math:`\frac{\partial \log p(x^{(i)})}{\partial
\theta}`, where :math:`\theta` are the parameters of the model.


**EBMs with Hidden Units**

In many cases of interest, we do not observe the example :math:`x` fully, or we
want to introduce some non-observed variables to increase the expressive power
of the model. So we consider an observed part (still denoted :math:`x` here) and a
**hidden** part :math:`h`. We can then write:

.. math::
  :label: energy2

   P(x) = \sum_h P(x,h) = \sum_h \frac{e^{-E(x,h)}}{Z}.

In such cases, to map this formulation to one similar to Eq. :eq:`energy1`, we
introduce the notation (inspired from physics) of **free energy**, defined as
follows:

.. math::
   :label: free_energy

    \mathcal{F}(x) = - \log \sum_h e^{-E(x,h)}

which allows us to write,

.. math::
    &P(x) = \frac{e^{-\mathcal{F}(x)}}{Z} \text{ with } Z=\sum_x e^{-\mathcal{F}(x)}.

The data log-likelihood gradient then has a particularly interesting form.

.. math::
  \frac{\partial \log p(x)}{\partial \theta}
   &= - \frac{\partial \mathcal{F}(x)}{\partial \theta} + 
         \sum_{\tilde{x}} p(\tilde{x}) \
             \frac{\partial \mathcal{F}(\tilde{x})}{\partial \theta}.

Notice that the above gradient contains two terms, which are referred to as
the **positive** and **negative phase**. The terms positive and negative do
not refer to the sign of each term in the equation, but rather reflect their
effect on the probability density defined by the model. The first term
increases the probability of training data (by reducing the corresponding free
energy), while the second term decreases the probability of samples generated
by the model.

It is usually difficult to determine this gradient analytically, as it
involves the computation of 
:math:`E_P [ \frac{\partial \mathcal{F}(x)} {\partial \theta} ]`. This is
nothing less than an expectation over all possible configurations of the input
:math:`x` (under the distribution :math:`P` formed by the model) !

The first step in making this computation tractable is to estimate the
expectation using a fixed number of model samples. Samples used to estimate the
negative phase gradient are referred to as **negative particles**, which are
denoted as :math:`\mathcal{N}`. The gradient can then be written as:

.. math::
  :label: bm_grad

  \frac{\partial \log p(x)}{\partial \theta}
   &\approx 
   - \frac{\partial \mathcal{F}(x)}{\partial \theta} + 
     \frac{1}{|\mathcal{N}|}\sum_{\tilde{x} \in \mathcal{N}} \
     \frac{\partial \mathcal{F}(\tilde{x})}{\partial \theta}.

where we would ideally like elements :math:`\tilde{x}` of :math:`\mathcal{N}` to be sampled
according to :math:`P` (i.e. we are doing Monte-Carlo).
With the above formula, we almost have a pratical, stochastic algorithm for
learning an EBM. The only missing ingredient is how to extract these negative
particles :math:`\mathcal{N}`. While the statistical litterature abounds with
sampling methods, Markov Chain Monte Carlo methods are especially well suited
for models such as the Restricted Boltzmann Machines (RBM), a specific type of
EBM.


Restricted Boltzmann Machines (RBM)
+++++++++++++++++++++++++++++++++++

Boltzmann Machines (BMs) are a particular form of log-linear Markov Random Field (MRF),
i.e., for which the energy function is linear in its free parameters. To make
them powerful enough to represent complicated distributions (i.e., go from the
limited parametric setting to a non-parametric one), we consider that some of
the variables are never observed (they are called hidden). By having more hidden
variables (also called hidden units), we can increase the modeling capacity 
of the Boltzmann Machine (BM).
Restricted Boltzmann Machines further restrict BMs to
those without visible-visible and hidden-hidden connections.  A graphical
depiction of an RBM is shown below.

.. image:: images/rbm.png
    :align: center

The energy function :math:`E(x,h)` of an RBM is defined as:

.. math::
    :label: rbm_energy

    E(v,h) = - b'x - c'h - h'Wx 

where :math:`W` represents the weights connecting hidden and visible units and
:math:`b`, :math:`c` are the offsets of the visible and hidden layers
respectively.

This translates directly to the following free energy formula:

.. math::

  \mathcal{F}(x)= - b'x - \sum_i \log \sum_{h_i} e^{h_i (c_i + W_i x)}.

Because of the specific structure of RBMs, visible and hidden units are
conditionally independent given one-another. Using this property, we can
write:

.. math::
    p(h|x) &= \prod_i p(h_i|x) \\
    p(x|h) &= \prod_j p(x_j|h).

**RBMs with binary units**

In the commonly studied case of using binary units (where :math:`x_j` and :math:`h_i \in
\{0,1\}`), we obtain from Eq. :eq:`rbm_energy` and :eq:`energy2`, a probabilistic
version of the usual neuron activation function:

.. math::
  :label: rbm_propup

  P(h_i=1|x) = sigm(c_i + W_i x) \\

.. math::
  :label: rbm_propdown

  P(x_j=1|h) = sigm(b_j + W'_j h)

The free energy of an RBM with binary units further simplifies to:

.. math::
  :label: rbm_free_energy   

  \mathcal{F}(x)= - b'x - \sum_i \log(1 + e^{(c_i + W_i x)}).

**Update Equations with Binary Units**

Combining Eqs. :eq:`bm_grad` with :eq:`rbm_free_energy`, we obtain the
following log-likelihood gradients for an RBM with binary units:

.. math::
    :label: rbm_grad

    \frac {\partial{\log p(v)}} {\partial W_{ij}} &= 
        x^{(i)}_j \cdot sigm(W_i \cdot x^{(i)} + c_i)
       - E_v[p(h_i|v) \cdot v_j] \\
    \frac {\partial{\log p(v)}} {\partial c_i} &=
        sigm(W_i \cdot x^{(i)}) - E_v[p(h_i|v)] \\
    \frac {\partial{\log p(v)}} {\partial b_j} &=
        x^{(i)}_j - E_v[p(v_j|h)]

For a more detailed derivation of these equations, we refer the reader to the
following `page <http://www.iro.umontreal.ca/~lisa/twiki/bin/view.cgi/Public/DBNEquations>`_,
or to section 5 of `Learning Deep Architectures for AI <http://www.iro.umontreal.ca/%7Elisa/publications2/index.php/publications/show/239>`_.

.. note::
    We will be updating the tutorial shortly, such that the gradients are
    directly computed (using ``T.grad``) from the free energy formula.


Sampling in an RBM
++++++++++++++++++

Samples of :math:`p(x)` can be obtained by running a Markov chain to
convergence, using Gibbs sampling as the transition operator.

Gibbs sampling of the joint of N random variables :math:`S=(S_1, ... , S_N)`
is done through a sequence of N sampling sub-steps of the form 
:math:`S_i \sim p(S_i | S_{-i})` where :math:`S_{-i}` contains the :math:`N-1`
other random variables in :math:`S` excluding :math:`S_i`.

For RBMs, :math:`S` consists of the set of visible and hidden units. However,
since they are conditionally independent, one can perform block Gibbs
sampling. In this setting, visible units are sampled simultaneously given
fixed values of the hidden units. Similarly, hidden units are sampled
simultaneously given the visibles. A step in the Markov chain is thus taken as
follows: 

.. math::
    h^{(n+1)} &\sim sigm(W'x^{(n)} + c) \\
    x^{(n+1)} &\sim sigm(W h^{(n+1)} + b),

where :math:`h^{(n)}` refers to the set of all hidden units at the n-th step of
the Markov chain. What it means is that, for example, :math:`h^{(n+1)}_i` is
randomly chosen to be 1 (versus 0) with probability :math:`sigm(W_i'x^{(n)} + c_i)`,
and similarly, 
:math:`x^{(n+1)}_j` is
randomly chosen to be 1 (versus 0) with probability :math:`sigm(W_{.j}'h^{(n+1)} + b_j).

This can be illustrated graphically:

.. image:: images/markov_chain.png
    :align: center

As :math:`t \rightarrow \infty`, samples :math:`(x^{(t)}, h^{(t)})` are
guaranteed to be accurate samples of :math:`p(x,h)`.

In theory, each parameter update in the learning process would require running
one such chain to convergence. It is needless to say that doing so would be
prohibitively expensive. As such, several algorithms have been devised for
RBMs, in order to efficiently sample from :math:`p(x,h)` during the learning
process.


Contrastive Divergence (CD-k)
-----------------------------

Contrastive Divergence uses two tricks to speed up the sampling process:

* since we eventually want :math:`p(x) \approx p_{train}(x)` (the true, underlying
  distribution of the data), we initialize the Markov chain with a training
  example (i.e., from a distribution that is expected to be close to :math:`p`,
  so that the chain will be already close to having converged to its final distribution :math:`p`).
  
* CD does not wait for the chain to converge. Samples are obtained after only
  k-steps of Gibbs sampling. In pratice, :math:`k=1` has been shown to work
  surprisingly well.


Persistent CD
-------------

Persistent CD [Tieleman08]_ uses another approximation for sampling from
:math:`p(x,h)`.  It relies on a single Markov chain, which has a persistent
state (i.e., not restarting a chain for each observed example). For each
parameter update, we extract new samples by simply running the chain for
k-steps. The state of the chain is then preserved for subsequent updates.

The general intuition is that if parameter updates are small enough compared
to the mixing rate of the chain, the Markov chain should be able to "catch up"
to changes in the model.


Implementation
++++++++++++++

We construct an ``RBM`` class. The parameters of the network can either be
initialized by the constructor or can be passed as arguments. This option is
useful when an RBM is used as the building block of a deep network, in which
case the weight matrix and the hidden layer bias is shared with the
corresponding sigmoidal layer of an MLP network.

.. code-block:: python

  class RBM(object):
    """Restricted Boltzmann Machine (RBM) """
    def __init__(self, input=None, n_visible=784, n_hidden=500, \
        W = None, hbias = None, vbias = None, numpy_rng = None, 
        theano_rng = None):
        """ 
        RBM constructor. Defines the parameters of the model along with
        basic operations for inferring hidden from visible (and vice-versa), 
        as well as for performing CD updates.

        :param input: None for standalone RBMs or symbolic variable if RBM is
        part of a larger graph.

        :param n_visible: number of visible units

        :param n_hidden: number of hidden units

        :param W: None for standalone RBMs or symbolic variable pointing to a
        shared weight matrix in case RBM is part of a DBN network; in a DBN,
        the weights are shared between RBMs and layers of a MLP

        :param hbias: None for standalone RBMs or symbolic variable pointing 
        to a shared hidden units bias vector in case RBM is part of a 
        different network

        :param vbias: None for standalone RBMs or a symbolic variable 
        pointing to a shared visible units bias
        """

        self.n_visible = n_visible
        self.n_hidden  = n_hidden


        if W is None : 
           # W is initialized with `initial_W` which is uniformely sampled
           # from -6./sqrt(n_visible+n_hidden) and 6./sqrt(n_hidden+n_visible)
           # the output of uniform if converted using asarray to dtype 
           # theano.config.floatX so that the code is runable on GPU
           initial_W = numpy.asarray( numpy.random.uniform( 
                     low = -numpy.sqrt(6./(n_hidden+n_visible)), 
                     high = numpy.sqrt(6./(n_hidden+n_visible)), 
                     size = (n_visible, n_hidden)), 
                     dtype = theano.config.floatX)
           # theano shared variables for weights and biases
           W = theano.shared(value = initial_W, name = 'W')

        if hbias is None :
           # create shared variable for hidden units bias
           hbias = theano.shared(value = numpy.zeros(n_hidden, 
                               dtype = theano.config.floatX), name='hbias')

        if vbias is None :
            # create shared variable for visible units bias
            vbias = theano.shared(value =numpy.zeros(n_visible, 
                                dtype = theano.config.floatX),name='vbias')

        if numpy_rng is None:    
            # create a number generator 
            numpy_rng = numpy.random.RandomState(1234)

        if theano_rng is None : 
            theano_rng = RandomStreams(numpy_rng.randint(2**30))


        # initialize input layer for standalone RBM or layer0 of DBN
        self.input = input if input else T.dmatrix('input')

        self.W          = W
        self.hbias      = hbias
        self.vbias      = vbias
        self.theano_rng = theano_rng
        # **** WARNING: It is not a good idea to put things in this list 
        # other than shared variables created in this function.
        self.params     = [self.W, self.hbias, self.vbias]
        self.batch_size = self.input.shape[0]


Next step is to define functions which construct the symbolic graph associated
with Eqs. :eq:`rbm_propup` - :eq:`rbm_propdown`. The code is as follows:

.. code-block:: python

    def sample_h_given_v(self, v0_sample):
        ''' This function infers state of hidden units given visible units '''
        # compute the activation of the hidden units given a sample of the visibles
        h1_mean = T.nnet.sigmoid(T.dot(v0_sample, self.W) + self.hbias)
        # get a sample of the hiddens given their activation
        h1_sample = self.theano_rng.binomial(size = h1_mean.shape, n = 1, prob = h1_mean)
        return [h1_mean, h1_sample]

    def sample_v_given_h(self, h0_sample):
        ''' This function infers state of visible units given hidden units '''
        # compute the activation of the visible given the hidden sample
        v1_mean = T.nnet.sigmoid(T.dot(h0_sample, self.W.T) + self.vbias)
        # get a sample of the visible given their activation
        v1_sample = self.theano_rng.binomial(size = v1_mean.shape,n = 1,prob = v1_mean)
        return [v1_mean, v1_sample]

We can then use these functions to define the symbolic graph for a Gibbs
sampling step. We define two functions:

* ``gibbs_vhv`` which performs a step of Gibbs sampling starting from the
  visible units. As we shall see, this will be useful for sampling from the
  RBM.

* ``gibbs_hvh`` which performs a step of Gibbs sampling starting from the hidden units. 
  This function will be useful for performing CD and PCD updates.

The code is as follows:

.. code-block:: python

    def gibbs_hvh(self, h0_sample):
        ''' This function implements one step of Gibbs sampling, 
            starting from the hidden state'''
        v1_mean, v1_sample = self.sample_v_given_h(h0_sample)
        h1_mean, h1_sample = self.sample_h_given_v(v1_sample)
        return [v1_mean, v1_sample, h1_mean, h1_sample]
 
    def gibbs_vhv(self, v0_sample):
        ''' This function implements one step of Gibbs sampling, 
            starting from the visible state'''
        h1_mean, h1_sample = self.sample_h_given_v(v0_sample)
        v1_mean, v1_sample = self.sample_v_given_h(h1_sample)
        return [h1_mean, h1_sample, v1_mean, v1_sample]


We then add a ``cd`` method, whose purpose is to generate the symbolic
gradients for CD-1 and PCD-1 updates.

.. code-block:: python

    def cd(self, lr = 0.1, persistent=None):
        """ This functions implements one step of CD-1 """

        # compute positive phase
        ph_mean, ph_sample = self.sample_h_given_v(self.input)

        # decide how to initialize persistent chain:
        # for CD, we use the newly generate hidden sample
        # for PCD, we initialize from the old state of the chain
        if persistent is None:
            chain_start = ph_sample
        else:
            chain_start = persistent

        # perform actual negative phase
        [nv_mean, nv_sample, nh_mean, nh_sample] = self.gibbs_hvh(chain_start)


Note that ``cd`` takes as argument a variable called ``persistent``. While this
may be confusing to the reader (since CD is by definition **not** persistent),
this little trick allows us to use the same code to implement both CD and PCD.
To use PCD, ``persistent`` should refer to a shared variable which contains the
state of the Gibbs chain from the previous iteration.

If ``persistent`` is ``None``, we initialize the Gibbs chain with the hidden
sample generated during the positive phase. Once we have established the
starting point of the chain, we can then compute the values of the visible and
hidden units in both the positive and negative phases. These are required to
compute the gradients of Eq. :eq:`rbm_grad`.

.. code-block:: python

        # determine gradients on RBM parameters
        g_vbias = T.sum( self.input - nv_mean, axis = 0)/self.batch_size
        g_hbias = T.sum( ph_mean    - nh_mean, axis = 0)/self.batch_size
        g_W = T.dot(ph_mean.T, self.input   )/ self.batch_size - \
              T.dot(nh_mean.T, nv_mean      )/ self.batch_size

        gparams = [g_W.T, g_hbias, g_vbias]

Finally, we construct the updates dictionary containing the parameter
updates. In the case of PCD, these should also update the shared variable
containing the state of the Gibbs chain.

.. code-block:: python

        # constructs the update dictionary
        updates = {}
        for gparam, param in zip(gparams, self.params):
           updates[param] = param + gparam * lr

        if persistent:
            # Note that this works only if persistent is a shared variable
            updates[persistent] = T.cast(nh_sample, dtype=theano.config.floatX)


        return updates

We now have all the necessary ingredients to start training our network.

Before going over the training loop however, the reader should familiarize
himself with the function ``tile_raster_images`` (see :ref:`how-to-plot`). Since
RBMs are generative models, we are interested in sampling from them and
plotting/visualizing these samples. We also want to visualize the filters
(weights) learnt by the RBM, to gain insights into what the RBM is actually
doing. Bare in mind however, that this does not provide the entire story,
since we neglect the biases and plot the weights up to a multiplicative
constant (weights are converted to values between 0 and 1). 

Having these utility functions, we can start training the RBM and plot/save
the filters after each training epoch.  We train the RBM using PCD, as it has
been shown to lead to a better generative model ([Tieleman08]_).

.. code-block:: python

    for epoch in xrange(training_epochs):

        # go through the training set
        c = []
        for batch_index in xrange(n_train_batches):
           train_rbm(batch_index)

        print 'Training epoch %d '%epoch

        # Plot filters after each training epoch
        plotting_start = time.clock()
        # Construct image from the weight matrix 
        image = PIL.Image.fromarray(tile_raster_images( X = rbm.W.value.T,
                 img_shape = (28,28),tile_shape = (10,10), 
                 tile_spacing=(1,1)))
        image.save('filters_at_epoch_%i.png'%epoch) 
        plotting_stop = time.clock()
        plotting_time += (plotting_stop - plotting_start)

    end_time = time.clock()

    pretraining_time = (end_time - start_time) - plotting_time

    print ('Training took %f minutes' %(pretraining_time/60.))

Once the RBM is trained, we can then use the ``gibbs_vhv`` function to implement
the Gibbs chain required for sampling. We initialize the Gibbs chain starting
from test examples (although we could as well pick it from the training set)
in order to speed up convergence and avoid problems with random
initialization.

.. code-block:: python

    #################################
    #     Sampling from the RBM     #
    #################################

    # find out the number of test samples  
    number_of_test_samples = test_set_x.value.shape[0]

    # pick random test examples, with which to initialize the persistent chain
    test_idx = rng.randint(number_of_test_samples-20)
    persistent_vis_chain = theano.shared(test_set_x.value[test_idx:test_idx+20])

Next we create the 20 persistent chains in parallel to get our
samples. To do so, we compile a theano function which performs one Gibbs step
and updates the state of the persistent chain with the new visible sample. We
apply this function iteratively for a large number of steps, plotting the
samples at every 1000 steps.

.. code-block:: python

    # define one step of Gibbs sampling (mf = mean-field)
    [hid_mf, hid_sample, vis_mf, vis_sample] =  rbm.gibbs_vhv(persistent_vis_chain)

    # the sample at the end of the channel is returned by ``gibbs_vhv`` as 
    # its last output; note that this is computed as a binomial draw, 
    # therefore it is formed of ints (0 and 1) and therefore needs to 
    # be converted to the same dtype as ``persistent_vis_chain``
    vis_sample = T.cast(vis_sample, dtype=theano.config.floatX)

    # construct the function that implements our persistent chain 
    # we generate the "mean field" activations for plotting and the actual samples for
    # reinitializing the state of our persistent chain
    sample_fn = theano.function([], [vis_mf, vis_sample],
                      updates = { persistent_vis_chain:vis_sample})

    # sample the RBM, plotting every `plot_every`-th sample; do this 
    # until you plot at least `n_samples`
    n_samples = 10
    plot_every = 1000

    for idx in xrange(n_samples):
        # generate `plot_every` intermediate samples that we discard, because successive samples in the chain are too correlated
        for jdx in  xrange(plot_every):
            vis_mf, vis_sample = sample_fn()

        # construct image
        image = PIL.Image.fromarray(tile_raster_images( 
                                         X          = vis_mf, 
                                         img_shape  = (28,28), 
                                         tile_shape = (10,10),
                                         tile_spacing = (1,1) ) )
        print ' ... plotting sample ', idx
        image.save('sample_%i_step_%i.png'%(idx,idx*jdx))


Tracking Progress
+++++++++++++++++

RBMs are particularly tricky to train. Because of the partition function
:math:`Z` of Eq. :eq:`energy1`, we cannot estimate the log-likelihood
:math:`\log(P(x))` during training. We therefore have no direct useful metric
for choosing the optimal hyperparameters.

Several options are available to the user.

**Inspection of Negative Samples**

Negative samples obtained during training can be visualized. As training
progresses, we know that the model defined by the RBM becomes closer to the
true underlying distribution, :math:`p_{train}(x)`. Negative samples should thus
look like samples from the training set. Obviously bad hyperparameters can be
discarded in this fashion.

**Visual Inspection of Filters**

The filters learnt by the model can be visualized. This amounts to plotting
the weights of each unit as a gray-scale image (after reshaping to a square
matrix). Filters should pick out strong features in the data. While it is not
clear for an arbitrary dataset, what these features should look like, training
on MNIST usually results in filters which act as stroke detectors, while
training on natural images lead to Gabor like filters if trained in
conjunction with a sparsity criteria.

**Proxies to Likelihood**  

Other, more tractable functions can be used as a proxy to the likelihood.  When
training an RBM with PCD, one can use pseudo-likelihood as the proxy.
Pseudo-likelihood (PL) is much less expensive to compute, as it assumes that
all bits are independent. Therefore,

.. math::
    PL(x) = \prod_i P(x_i | x_{-i}) \text{ and }\\
    \log PL(x) = \sum_i \log P(x_i | x_{-i})

Here :math:`x_{-i}` denotes the set of all bits of :math:`x` except bit
:math:`i`. The log-PL is therefore the sum of the log-probabilities of each
bit :math:`x_i`, conditionned on the state of all other bits. For MNIST, this
would involve summing over the 784 input dimensions, which remains rather
expensive. For this reason, we use the following stochastic approximation to
log-PL:

.. math::
   g = N \cdot \log P(x_i | x_{-i}) \text{, where } i \sim U(0,N), \text{, and}\\
   E[ g ] = \log PL(x) 
    
where the expectation is taken over the uniform random choice of index :math:`i`,
and :math:`N` is the number of visible units. In order to work with binary
units, we further introduce the notation :math:`\tilde{x}_i` to refer to
:math:`x` with bit-i being flipped (1->0, 0->1). The log-PL for an RBM with binary unit is
then written as:

.. math::
    \log PL(x) &\approx N \cdot \log 
       \frac {e^{-FE(x)}} {e^{-FE(x)} + e^{-FE(\tilde{x}_i)}} \\
    &\approx N \cdot \log[ sigm (FE(\tilde{x}_i) - FE(x)) ]

We modify the `cd` function of the `RBM` class, to return this cost as well as
the RBM updates. Notice that we modify the updates dictionary to increment the
index of bit :math:`i`. This will result in bit i cycling over all possible
values :math:`\{0,1,...,N\}`, from one update to another.

.. code-block:: python

    def cd(self, lr = 0.1, persistent=None):
    
        ...

        ####################################################
        # stochastic approximation to the pseudo-likelihood
        ####################################################

        # index of bit i in expression p(x_i | x_{-i})
        bit_i_idx = theano.shared(value=0, name = 'bit_i_idx')

        # binarize the input image by rounding to nearest integer
        xi = T.iround(self.input)
        # calculate free energy for the given bit configuration
        fe_xi = self.free_energy(xi)

        # flip bit x_i of matrix xi and preserve all other bits x_{-i}
        # Equivalent to xi[:,bit_i_idx] = 1-xi[:, bit_i_idx]
        # NB: slice(start,stop,step) is the python object used for
        # slicing, e.g. to index matrix x as follows: x[start:stop:step]
        xi_flip = T.setsubtensor(xi, 1-xi[:, bit_i_idx], 
                                 idx_list=(slice(None,None,None),bit_i_idx))
        
        # calculate free energy with bit flipped
        fe_xi_flip = self.free_energy(xi_flip)

        # equivalent to e^(-FE(x_i)) / (e^(-FE(x_i)) + e^(-FE(\tilde{x}_i)))
        cost = self.n_visible * T.log(T.nnet.sigmoid(fe_xi_flip - fe_xi))

        # increment bit_i_idx % number as part of updates
        print type(self.n_visible)
        updates[bit_i_idx] = (bit_i_idx + 1) % self.n_visible

        return updates, cost


The main training loop of the RBM is then modified to average this cost across
a training epoch. We report the average log-PL over a training epoch.

.. code-block:: python

    def test_rbm( learning_rate=0.1, training_epochs = 15, dataset='mnist.pkl.gz'):

        # get the cost and the gradient corresponding to one step of CD
        updates, cost = rbm.cd(lr=learning_rate, persistent=persistent_chain)

        ...

        # go through training epochs
        for epoch in xrange(training_epochs):

            # go through the training set
            mean_cost = []

            for batch_index in xrange(n_train_batches):
               mean_cost += [train_rbm(batch_index)]

            print 'Training epoch %d, cost is '%epoch, numpy.mean(mean_cost)



Results
+++++++

We ran the code for learning rates in :math:`\{0.1,1e-2,1e-3,1e-4\}`. All
learning rates except 1e-4 converged to near optimal values, epsilon away from
0. We show the results for .01 as it achieved the best absolute results (even
though this is in no way significant).

The output was the following:

.. code-block:: bash

    Using learning rate of  0.01
    Training epoch 0, cost is  -1.06728418245
    Training epoch 1, cost is  -2.00793186183e-07
    Training epoch 2, cost is  -7.68665254548e-10
    Training epoch 3, cost is  -1.56047685793e-08
    Training epoch 4, cost is  -4.42882570337e-09
    Training epoch 5, cost is  -9.87394378396e-13
    Training epoch 6, cost is  -6.76010461785e-10
    Training epoch 7, cost is  -1.22007408074e-11
    Training epoch 8, cost is  -9.57370394861e-13
    Training epoch 9, cost is  -7.85930732375e-13
    Training epoch 10, cost is  -1.56340707433e-13
    Training epoch 11, cost is  -8.05286460948e-12
    Training epoch 12, cost is  -9.47734215993e-15
    Training epoch 13, cost is  -1.47528843905e-14
    Training epoch 14, cost is  -9.50189593559e-14
    Training took 35.968667 minutes
     ... plotting sample  0
     ... plotting sample  1
     ... plotting sample  2
     ... plotting sample  3
     ... plotting sample  4
     ... plotting sample  5
     ... plotting sample  6
     ... plotting sample  7
     ... plotting sample  8
     ... plotting sample  9
    return value 0

The pictures below show the filters after 15 epochs : 

.. figure:: images/filters_at_epoch_14.png
    :align: center

    Filters obtained after 15 epochs.

Here are the samples generated by the RBM after training. Each set of two lines
represents a mini-batch of negative particles (samples from independent Gibbs
chain). 1000 steps of Gibbs sampling were taken between each of those sets of particles.

.. figure:: images/sample_0_step_0.png
    :align: center

   
.. figure:: images/sample_1_step_999.png
    :align: center

   
.. figure:: images/sample_2_step_1998.png
    :align: center

   
.. figure:: images/sample_3_step_2997.png
    :align: center

   
.. figure:: images/sample_4_step_3996.png
    :align: center
